from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from backend.models.models import Product, Sale
from datetime import datetime
import asyncio
import os

BOT_TOKEN = "7855635475:AAEeAtmkgPhQbi8PcsDUA5Pw4pbyJBT1RUQ"
CHAT_ID = "7727164310"
SHOP_URL = "https://diplom-8o5u.onrender.com/"

DATABASE_URL = "sqlite:///diplom.db"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üìä /statistics ‚Äî –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "üí∞ /sales ‚Äî –ü—Ä–æ–¥–∞–∂–∏"
    )

async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    products = session.query(Product).all()
    session.close()

    if not products:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö.")
        return

    companies = len(set(p.company_id for p in products if p.company_id))
    prices = [p.price for p in products]
    stocks = [p.stock for p in products]

    msg = (
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ: {len(products)}\n"
        f"üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {companies}\n"
        f"üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {round(sum(prices) / len(prices), 2)} ‚ÇΩ\n"
        f"‚¨áÔ∏è –ú–∏–Ω. —Ü–µ–Ω–∞: {min(prices)} ‚ÇΩ\n"
        f"‚¨ÜÔ∏è –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max(prices)} ‚ÇΩ\n"
        f"üì¶ –°—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {sum(stocks)}"
    )
    await update.message.reply_text(msg)

async def sales(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    sales = session.query(Sale).order_by(Sale.timestamp.desc()).limit(10).all()
    session.close()

    if not sales:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.")
        return

    msg = "\n".join(
        f"{s.product_name} ‚Äî {s.quantity} —à—Ç. –ø–æ {s.price_at_sale}‚ÇΩ ({s.timestamp.strftime('%d.%m.%Y %H:%M')})"
        for s in sales
    )
    await update.message.reply_text("üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:\n\n" + msg)

async def check_low_stock(app):
    while True:
        session = Session()
        low_stock_products = session.query(Product).filter(Product.stock <= 5).all()
        session.close()

        for p in low_stock_products:
            message = (
                f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {p.name} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {p.stock} —à—Ç.\n"
                f"üí≥ –ö—É–ø–∏—Ç—å: {SHOP_URL}"
            )
            try:
                await app.bot.send_message(chat_id=CHAT_ID, text=message)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)

        await asyncio.sleep(15)  # –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("statistics", statistics))
    app.add_handler(CommandHandler("sales", sales))
    asyncio.create_task(check_low_stock(app))

    await app.run_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
